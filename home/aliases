#!/bin/bash

if [[ $(tty) == /dev/tty[1-6] ]]; then
  ~/.cache/colorschemes/tty.sh
fi

export VISUAL="${EDITOR}"
export EDITOR="nvim"
export TERMINAL="alacritty"
export BROWSER="firefox"
export HISTORY_IGNORE="(ls|cd|pwd|exit|sudo reboot|history|cd -|cd ..)"
export PATH="/usr/sbin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export DPRINT_INSTALL="/home/mike/.dprint"
export PATH="$DPRINT_INSTALL/bin:$PATH"

# aliases
alias nv='nvim'
alias hx='helix'
alias :q='; exit'
alias git-clone='_git_clone'
alias git-merge-main='merge_main_to_branches'
alias poweroff='/sbin/poweroff'
alias reboot='/sbin/reboot'
alias update='sudo apt update && sudo apt full-upgrade -y && sudo apt autopurge'
alias rm-nvim='rm -rf ~/.cache/nvim/ ~/.local/share/nvim/ ~/.local/state/nvim/ ~/.config/nvim/lazy-lock.json'
alias history='fc -l -1000 | less +G'
alias bc='bc -l'
alias mkdir='mkdir -pv'
alias sprm='mvn clean && mvn spring-boot:run'
alias sprg='./gradlew bootRun'
alias sprmx='nohup alacritty -e sh -c "mvn clean && mvn spring-boot:run" >/dev/null 2>&1 &'
alias sprgx='nohup alacritty -e sh -c "./gradlew bootRun" >/dev/null 2>&1 &'
alias jtem='nvim ~/.templates/dependencies.xml ~/.templates/application.properties ~/.templates/javapages.jsp -c "vsp ~/.templates/application.properties" -c "sp ~/.templates/javapages.jsp"'
alias mhttp='cat ~/.rest-nvim.rest | xclip -selection clipboard'
alias toMp3='sh -c '\''ffmpeg -i "$1" -q:a 0 -map a "${1%.*}.mp3"'\'' -'
alias toMp4='sh -c '\''ffmpeg -i "$1" -codec:v copy -codec:a copy "${1%.*}.mp4"'\'' -'

### BASH or ZSH
if [ "$SHELL" = "/bin/zsh" ]; then
  # Syntax Highlighting
  source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
  # PROMPT
  setopt PROMPT_SUBST
  source ~/.zsh/git-prompt.zsh/git-prompt.zsh

  function dir_icon {
    if [[ "$PWD" == "$HOME" ]]; then
      echo ""
    else
      echo "%B%~%b "
    fi
  }
  PROMPT='$(dir_icon)%F{red}≻≻≻%f '
  RPROMPT='$(gitprompt)'

  # COMPLETION
  autoload -U compinit
  compinit

  # HISTORY
  if (( ! EUID )); then
    HISTFILE=~/.zsh_history_root
  else
    HISTFILE=~/.zsh_history
  fi

  HISTSIZE=10000
  SAVEHIST=10000

  setopt sharehistory
  setopt appendhistory
  setopt incappendhistory
  setopt hist_ignore_all_dups
  setopt hist_reduce_blanks
  setopt hist_expire_dups_first
  setopt hist_ignore_space
  setopt hist_find_no_dups

  # Command completion
  compdef _colorscheme_completions_zsh colorscheme

elif [ "$SHELL" = "/bin/bash" ]; then
  PS1='\u@\h:\w$ '

  # Command completion
  complete -F _colorscheme_completions_bash colorscheme
fi

_git_clone() {
  if [ -z "$1" ]; then
    echo "Please provide the repository path."
    return 1
  fi
  local repo_path=${1//\//\/}
  local git_url="git@github.com:${repo_path}.git"
  git clone "$git_url"
}

_colorscheme_completions_zsh() {
  local context state state_descr line
  typeset -A opt_args

  _arguments -C \
    '1: :->arg'

  case "$state" in
    arg)
      local expl
      if [[ $PREFIX == */* ]]; then
        _files
      else
        local -a options
        local dir="${HOME}/.config/colorschemes/colors"
        options=(${(f)"$(basename -s .sh ${(M)${(f)"$(ls $dir)"}:#*.sh})"})
        _describe -t color-schemes 'color schemes' options
      fi
      ;;
  esac
}

_colorscheme_completions_bash() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  
  case "$prev" in
    colorscheme)
      local dir="$HOME/.config/colorschemes/colors"
      opts=$(ls "$dir"/*.sh 2>/dev/null | xargs -n1 basename -s .sh | tr '\n' ' ')
      ;;
  esac

  COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
}

function merge_main_to_branches() {
  # Asegúrate de estar en la rama main
  git checkout main || return
  
  git push origin main || return

  # Obtén una lista de todas las ramas excepto 'main'
  local branches
  branches=$(git branch --format '%(refname:short)' | grep -v '^main$')

  # Realiza el merge de main en cada rama
  while IFS= read -r branch; do
    echo "Mergeando main en $branch"
    git checkout "$branch" || return
    git merge main || return
    # Si deseas hacer un push automático después del merge, descomenta la siguiente línea
    git push origin "$branch"
  done <<< "$branches"

  # Regresa a la rama main
  git checkout main || return
}
